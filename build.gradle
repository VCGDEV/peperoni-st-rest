buildscript {
   repositories {
     mavenCentral()
     maven {
        credentials {
           username System.getenv("artifactory_user")
           password System.getenv("artifactory_password")
        }
        url 'https://vsatdev.jfrog.io/artifactory/gradle-dev-local'
     }
   }

   dependencies {
      classpath('com.vcgdev.plugin:rapi-generator:1.3.0')
   }
}

plugins {
	id 'org.springframework.boot' version '2.4.1'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'jacoco'
}
apply plugin: 'com.vcgdev.plugin'
group = 'com.vcgdev.store'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
        credentials {
           username System.getenv("artifactory_user")
           password System.getenv("artifactory_password")
        }
        url 'https://vsatdev.jfrog.io/artifactory/gradle-dev-local'
     }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.security.oauth:spring-security-oauth2')
	compile(group: 'com.vcgdev.common', name: 'common-rest', version: '0.0.1')
	compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.7.0'
	compile 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.1.3.RELEASE'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	implementation "org.mapstruct:mapstruct:1.3.1.Final"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.3.1.Final"

    testAnnotationProcessor "org.mapstruct:mapstruct-processor:1.3.1.Final"
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
}


def jacocoExclude = ['com/vcgdev/store/peperoni/PeperoniStRestApplication**',
					 'com/vcgdev/store/peperoni/config/**']

def jacocoExcludeVerification = ['com.vcgdev.store.peperoni.PeperoniStRestApplication**',
								 'com.vcgdev.store.peperoni.config.**']

jacoco {
   toolVersion = '0.8.5'
   reportsDir = file('$buildDir/reports/jacoco')
}

jacocoTestReport {
   reports {
      xml.enabled false
      csv.enabled false
      html.destination file("${buildDir}/jacoco")
   }
   
   afterEvaluate {
      classDirectories.setFrom(files(classDirectories.files.collect {
         fileTree(dir: it,
	                  exclude: jacocoExclude
	 )
      }))
   }
}

jacocoTestCoverageVerification {
   violationRules {
      rule {
	element = 'CLASS'
	includes = ['com.vcgdev.store.peperoni.*']
	excludes = jacocoExcludeVerification
	limit {
	   counter = 'LINE'
	   value = 'COVEREDRATIO'
	   minimum = 0.9
	}
      }

      rule {
	element = 'CLASS'
	includes = ['com.vcgdev.store.peperoni.*']
	excludes = jacocoExcludeVerification
	limit {
	   counter = 'BRANCH'
	   value = 'COVEREDRATIO'
	   minimum = 0.9
	}
      }
   }

}


genRest{
	basePackage = "com.vcgdev.store.peperoni"
	servicePackage = "service"
	repositoryPackage = "persistence"
	entityPackage = "domain"
	resourcePackage = "rest"
	dtoPackage = "dto"
	mapperPackage = "mappers"
}